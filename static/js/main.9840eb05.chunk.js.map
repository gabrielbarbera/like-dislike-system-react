{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","handleLike","state","alreadyLiked","setState","likes","liked","dislikes","alreadyDisliked","handleDislike","className","this","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gMAAAA,EAAOC,QAAU,IAA0B,kC,qIC8F5BC,G,wBAxFb,aAAe,IAAD,8BACZ,+CASFC,WAAa,YACuB,IAA5B,EAAKC,MAAMC,cACmB,IAA5B,EAAKD,MAAMC,cACb,EAAKC,SAAS,CACZC,MAAO,EAAKH,MAAMG,MAAQ,EAC1BF,cAAc,IAEhB,EAAKG,UAEL,EAAKF,SAAS,CACZC,MAAO,EAAKH,MAAMG,MAAQ,EAC1BF,cAAc,IAEhB,EAAKG,SAGT,EAAKF,SAAS,CACZG,SAAU,EAAKL,MAAMK,SAAW,EAChCC,iBAAiB,EACjBH,MAAO,EAAKH,MAAMG,MAAQ,EAC1BF,cAAc,KA9BN,EAoCdM,cAAgB,YACkB,IAA5B,EAAKP,MAAMC,cACsB,IAA/B,EAAKD,MAAMM,gBACb,EAAKJ,SAAS,CACZG,SAAU,EAAKL,MAAMK,SAAW,EAChCC,iBAAiB,IAGnB,EAAKJ,SAAS,CACZG,SAAU,EAAKL,MAAMK,SAAW,EAChCC,iBAAiB,IAIrB,EAAKJ,SAAS,CACZG,SAAU,EAAKL,MAAMK,SAAW,EAChCC,iBAAiB,EACjBH,MAAO,EAAKH,MAAMG,MAAQ,EAC1BF,cAAc,KApDlB,EAAKD,MAAQ,CACXC,cAAc,EACdK,iBAAiB,EACjBH,MAAO,IACPE,SAAU,IANA,E,sEA6DZ,OACE,6BACE,6BACI,6CAEJ,4BAAQG,UAAcC,KAAKT,MAAMC,aAAe,oBAAsB,cAAgBS,QAAYD,KAAKV,YAAvG,UACSU,KAAKT,MAAMG,MADpB,KAEA,4BAAQK,UAAcC,KAAKT,MAAMM,gBAAkB,uBAAyB,iBAAmBI,QAAYD,KAAKF,eAAhH,aACYE,KAAKT,MAAMK,SADvB,KAEA,0U,GAvEUM,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9840eb05.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport Component from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      alreadyLiked: false,\n      alreadyDisliked: false,\n      likes: 100,\n      dislikes: 25\n    }\n  }\n\n  handleLike = () => {\n      if (this.state.alreadyLiked === false) {\n        if (this.state.alreadyLiked === false) {\n          this.setState({\n            likes: this.state.likes + 1,\n            alreadyLiked: true\n          })\n          this.liked();\n        } else {\n          this.setState({\n            likes: this.state.likes - 1,\n            alreadyLiked: false\n          })\n          this.liked();\n        }\n      } else {\n      this.setState({\n        dislikes: this.state.dislikes - 1,\n        alreadyDisliked: false,\n        likes: this.state.likes + 1,\n        alreadyLiked: false\n      })\n    }\n\n  }\n\n  handleDislike = () => {\n    if (this.state.alreadyLiked === false) {  \n      if (this.state.alreadyDisliked === false) {\n        this.setState({\n          dislikes: this.state.dislikes + 1,\n          alreadyDisliked: true\n        })\n      } else {\n        this.setState({\n          dislikes: this.state.dislikes - 1,\n          alreadyDisliked: false\n        })\n      }\n    } else {\n      this.setState({\n        dislikes: this.state.dislikes - 1,\n        alreadyDisliked: false,\n        likes: this.state.likes + 1,\n        alreadyLiked: false\n      })\n    }\n  }\n\n\n  render() {\n    return (\n      <div>\n        <div>\n            <h2>Like/Dislike</h2>\n        </div> \n        <button className = { this.state.alreadyLiked ? 'liked like-button' : 'like-button' } onClick = { this.handleLike }>\n        Like | { this.state.likes } </button> \n        <button className = { this.state.alreadyDisliked ? 'disliked like-button' : 'dislike-button' } onClick = { this.handleDislike }>\n        Dislike | { this.state.dislikes } </button> \n        <style> { `\n            .like-button, .dislike-button {\n              font-size: 1rem;\n              padding: 5px 10px;\n              color:   #585858;\n            }\n\n            .liked, .disliked {\n              font-weight: bold;\n              color: #1565c0;\n            }\n          ` } \n          </style>\n      </div> \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}